


https://www.baeldung.com/java-aws-s3



https://www.youtube.com/watch?v=vY7c7k8xmKE

java techie example






Creating Client Connection

First, we need to create a client connection to access Amazon S3 web service. We'll use AmazonS3 interface for this purpose:

AWSCredentials credentials = new BasicAWSCredentials(
  "<AWS accesskey>", 
  "<AWS secretkey>"
);



And then configure the client:

AmazonS3 s3client = AmazonS3ClientBuilder
  .standard()
  .withCredentials(new AWSStaticCredentialsProvider(credentials))
  .withRegion(Regions.US_EAST_2)
  .build();



Uploading Objects
Uploading an object is a pretty straightforward process. First, we will build a PutObjectRequest instance, specifying the bucket name and the key. Then, we will pass that request and the path to the file containing the data to s3Client's putObject method:

PutObjectRequest request = PutObjectRequest.builder()
    .bucket(bucketName)
    .key(key)
    .build();

return s3Client.putObject(request, Path.of(file.toURI()) );





--------------------




AWS S3 Bucket Setup


1. After making changes in the .yml file(adding s3 in the services), we need to restart the sudo docker-compose up(local stack) and perhaps need to restart the server as well. We can run the create bucket command anywhere from the root in CLI.



2. Creating a S3 bucket in local

aws --endpoint-url=http://localhost:4566 s3 mb s3://sie-nav-psd-fulfillment-local-fma





3. List of all buckets in local

aws --endpoint-url=http://localhost:4566 s3 ls





4. To list all the xmls under a particular S3 bucket

aws --endpoint-url=http://localhost:4566 s3 ls s3://sie-nav-psd-fulfillment-local-fma





5. aws --endpoint-url=http://localhost:4566 s3 cp s3://sie-nav-psd-fulfillment-local-fma/ORDER_CREATE-9000001001-1622238861-1-1-1_14.xml -
(works fine)
(aws cp will copy a local file or S3 object to another location locally or in S3)

(The following example streams the s3://bucket-name/filename.txt file to stdout and prints the contents to the console.

$ aws s3 cp s3://bucket-name/filename.txt -
hello world)





6. aws --endpoint-url=http://localhost:4566 s3 ls s3://sie-nav-psd-fulfillment-d1-fma environment: - SERVICES=sqs,s3

(For setting some environment variables perhaps)



---------------------




I can provide you with a full code example using Spring Boot and Java to create a microservice for pushing order details reports to an AWS S3 bucket. To do this, you will need to include the AWS SDK for Java in your project. Ensure you have the AWS SDK for Java installed, and you have your AWS credentials properly configured (either through environment variables or AWS configuration files).

Here's a step-by-step guide with a full code example:

1. **Create a new Spring Boot Project:**
   You can create a Spring Boot project using your favorite IDE or by using Spring Initializer. Make sure to include the "Web" and "AWS S3" dependencies.

2. **Set Up Your AWS Credentials:**
   Configure your AWS credentials using the AWS SDK for Java. You can do this by setting up your `~/.aws/credentials` file or by using environment variables.

3. **Write the Java Code:**

   ```java
   import org.springframework.beans.factory.annotation.Value;
   import org.springframework.boot.SpringApplication;
   import org.springframework.boot.autoconfigure.SpringBootApplication;
   import org.springframework.context.annotation.Bean;
   import org.springframework.web.multipart.MultipartFile;
   import org.springframework.web.bind.annotation.PostMapping;
   import org.springframework.web.bind.annotation.RequestParam;
   import org.springframework.web.bind.annotation.RestController;
   import com.amazonaws.services.s3.AmazonS3;
   import com.amazonaws.services.s3.AmazonS3ClientBuilder;
   import com.amazonaws.services.s3.model.ObjectMetadata;
   import com.amazonaws.services.s3.model.PutObjectRequest;
   
   @SpringBootApplication
   public class OrderServiceApplication {
       @Value("${aws.s3.bucketName}")
       private String s3BucketName;
   
       public static void main(String[] args) {
           SpringApplication.run(OrderServiceApplication.class, args);
       }
   
       @Bean
       public AmazonS3 s3Client() {
           return AmazonS3ClientBuilder.defaultClient();
       }
   
       @RestController
       public class OrderController {
           private final AmazonS3 s3Client;
   
           public OrderController(AmazonS3 s3Client) {
               this.s3Client = s3Client;
           }
   
           @PostMapping("/upload")
           public String uploadFile(@RequestParam("file") MultipartFile file) {
               try {
                   // Define the S3 object key (object name)
                   String s3ObjectKey = "order_reports/" + file.getOriginalFilename();
   
                   // Create metadata for the S3 object
                   ObjectMetadata metadata = new ObjectMetadata();
                   metadata.setContentLength(file.getSize());
   
                   // Upload the file to S3
                   s3Client.putObject(new PutObjectRequest(s3BucketName, s3ObjectKey, file.getInputStream(), metadata));
   
                   return "File uploaded successfully!";
               } catch (Exception e) {
                   return "Error uploading file: " + e.getMessage();
               }
           }
       }
   }
   ```

   In this code:

   - We define a Spring Boot application with an embedded REST controller (`OrderController`) to handle file uploads.
   - We inject the Amazon S3 client using Spring's dependency injection.
   - The `/upload` endpoint receives a file and uploads it to the specified S3 bucket.

4. **Configure Your AWS S3 Bucket:**
   Make sure you've created the AWS S3 bucket you want to use and set its name in your `application.properties` or `application.yml` file:

   ```yaml
   aws:
     s3:
       bucketName: your-s3-bucket-name
   ```

5. **Run Your Spring Boot Application:**
   Run your Spring Boot application, and it should start a server on a specified port (usually 8080 by default). You can then use a tool like Postman or curl to POST files to the `/upload` endpoint.

Remember to add proper exception handling and security measures to this code in a production environment.



--------------------





